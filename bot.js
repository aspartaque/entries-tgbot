//main
const { Scenes, session, Telegraf, Markup, Stage } = require('telegraf');
require('dotenv').config();
const bot = new Telegraf(process.env.TOKEN);

//scenes
const ScenesGenerator = require('./scenes');
const curScene = new ScenesGenerator();
const nameScene = curScene.UserName();
const telScene = curScene.UserTel();

//session
const LocalSession = require('telegraf-session-local');

//database
const Entries = require('./models');

//connect database
const sequelize = require('./connect');

//texts
const static = require('./text');
const msg = static.text;

//calendar
const Calendar = require('telegraf-calendar-telegram')
const blockedDays = [];
const calendar = new Calendar(bot, {
	startWeekDay: 1,
	weekDayNames: ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"],
	monthNames: [
		"–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä—Ç", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω—å",
		"–ò—é–ª—å", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"
	],
  minDate: null,
  maxDate: null,
  ignoreWeekDays: blockedDays,
	shortcutButtons: []
});


//result array - need change maybe delete?
const result = {
  day: null,
  time: null,
};

const stage = new Scenes.Stage([nameScene, telScene])
bot.use((new LocalSession({ database: 'db.json' })).middleware())
bot.use(session(), stage.middleware())


bot.start(async (ctx) => {
  try {
    if (ctx.session.name == null) {
      ctx.scene.enter('fio');
    } else {
      ctx.replyWithHTML('–ú—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã!\n–í—ã–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /calendar –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã!')
    }
  } catch (e) {
    console.error(e);
  }
})


calendar.setDateListener((ctx, date) => {
  if (result.day == null) {
    result.day = date;
    confirm(ctx, result); 
  } else {
    ctx.reply(`–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ${result.day}! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /clear –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.`)
  }
  // getNewTimes(ctx, result);
});
bot.command("/calendar", (ctx) => {
  const today = new Date();
  const minDate = new Date();
  minDate.setMonth(today.getMonth() - 0);
  const maxDate = new Date();
  maxDate.setMonth(today.getMonth() + 1);
  maxDate.setDate(today.getDate());

	ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", calendar.setMinDate(minDate).setMaxDate(maxDate).getCalendar())
});

// function getNewTimes(ctx, result) {
//   try {
//     let arr = [];
//     msg.days[1].times.forEach((el) => {
//       let timeName = el;
//       result.cart.time = timeName;
//       arr.push(Markup.button.callback(el, timeName));
//       pickTime(timeName);
//     })
//     var perChunk = 4;
//     var result = arr.reduce((resultArray, item, index) => { 
//         const chunkIndex = Math.floor(index/perChunk)
//         if(!resultArray[chunkIndex]) {
//           resultArray[chunkIndex] = []
//         }
//         resultArray[chunkIndex].push(item)
//         return resultArray
//       }, 
//     [])

//     ctx.replyWithHTML(`–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è `, Markup.inlineKeyboard(
//       result
//     ))
//     // confirm(ctx, result);
//   } catch(e) {
//     console.error(e)
//   }
// }

// bot.command('/get', (ctx) => {
//   try {
//     if (result.cart.day === null) { //need change
//       ctx.replyWithHTML('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏', Markup.inlineKeyboard(
//         [
//           [
//             Markup.button.callback(msg.days[0].monday.name, 'monday'),
//             Markup.button.callback(msg.days[0].tuesday.name, 'tuesday'),
//             Markup.button.callback(msg.days[0].wednesday.name, 'wednesday'),
//           ],
//           [
//             Markup.button.callback(msg.days[0].thursday.name, 'thursday'),
//             Markup.button.callback(msg.days[0].friday.name, 'friday'),
//             Markup.button.callback(msg.days[0].saturday.name, 'saturday'),
//             Markup.button.callback(msg.days[0].sunday.name, 'sunday'),
//           ]
//         ],
//       ))
//     } else {
//       ctx.reply(`–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ${result.cart.day}, –≤ ${result.cart.time}!`);
//     }
//   } catch(e) {
//     console.error(e)
//   }
// });





// for(obj of msg.days) {
//   Object.keys(obj).forEach((key) => {
//     let dayName = obj[key].name;
//     pickDay(key, dayName);
//   })
// }


//–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
// function pickDay(name, dayName) {
//   bot.action(name, async (ctx) => {
//     try {
//       await ctx.answerCbQuery();
//       result.cart.day = dayName;
//       getTime(ctx, name, dayName);
//     } catch(e) {
//       console.error(e)
//     }
//   })
// }


//–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤ –≤ –æ–ø—Ä.–¥–µ–Ω—å
// function getTime(ctx, name, dayName) {
//   for(obj of msg.days) {
//     Object.keys(obj).forEach((key) => {
//       if (key == name) {
//         try {
//           let arr = [];
//           obj[key].times.forEach((el) => {
//             if (el == '–í—ã—Ö–æ–¥–Ω–æ–π') 
//             {
//               ctx.reply('–í —ç—Ç–æ—Ç –¥–µ–Ω—å —É –ú–∞—Å—Ç–µ—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å!');
//             } 
//             else if (obj[key].times.length <= 0) 
//             {
//               ctx.reply('–í —ç—Ç–æ—Ç –¥–µ–Ω—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å!');
//             } 
//             else
//             {
//               let timeName = el;
//               pickTime(timeName);
//               arr.push(Markup.button.callback(el, timeName));
//             }
//           })
          
//           var perChunk = 4;
//           var result = arr.reduce((resultArray, item, index) => { 
//               const chunkIndex = Math.floor(index/perChunk)
//               if(!resultArray[chunkIndex]) {
//                 resultArray[chunkIndex] = []
//               }
//               resultArray[chunkIndex].push(item)
//               return resultArray
//             }, 
//           [])

//           ctx.replyWithHTML(`–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è –≤ ${dayName}`, Markup.inlineKeyboard(
//             result
//           ))
//         } catch(e) {
//           console.error(e)
//         }
//       }
//     })
//   }
// }


//–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è(—á–∞—Å—ã)
// function pickTime(timeName) {
//   bot.action(timeName, async (ctx) => {
//     try {
//       confirm(ctx, result); 
//     } catch(e) {
//       console.error(e)
//     }
//   })
// }

//–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å
function confirm(ctx, result) {
  ctx.replyWithHTML(
    `
    <i>–§–ò–û:</i> <b>${ctx.session.name}</b>\n<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i> <b>${ctx.session.tel}</b>\n<i>–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:</i> <b>${result.day}</b>\n\n<i>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–ø–∏—Å—å?</i>
    `,
    Markup.inlineKeyboard(
      [
        [
          Markup.button.callback('–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', 'entry_confirm'),
          Markup.button.callback('–ù–∞–∑–∞–¥', 'go_back'),
        ],
      ],
    )
  );
  bot.action('entry_confirm', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      if (ctx.session.name != null && ctx.session.tel != null && result.day != null) {
        await sequelize.authenticate();
        await sequelize.sync();
        Entries.create({id:ctx.session.id,user_name:ctx.session.name,user_tel:ctx.session.tel,entry_day:result.day,entry_time:result.time}).then(res=>{
          const user = {
            id: res.id, 
            user_name: res.user_name, 
            user_tel: res.user_tel,
            entry_day: res.entry_day,
            entry_time: res.entry_time,
          }
          console.log(user);
        }).catch(err=>console.log(err));
        await sequelize.sync();
        ctx.reply(`–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ${result.day}, –≤ ${result.time}!`);
        return true;
      } else {
        ctx.reply(`–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!`);
      }
    } catch(e) {
      console.error(e)
    }
  })
}

bot.command('/clear', async (ctx) => {
  try {
    if (result.day != null) {
      result.day = null;
      result.time = null;
      ctx.reply(`–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!`);
    } else {
      ctx.reply(`–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π!`);
    }
  } catch(e) {
    console.error(e)
  }
});

bot.action('go_back', async (ctx) => {
  await ctx.answerCbQuery();
  ctx.reply('–ù–∞–∑–∞–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
})




bot.hears('–∞–≤—Ç–æ—Ä', (ctx) => ctx.reply('–ì–µ–Ω–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: @spxrtxk'))
bot.on('text', (ctx) => ctx.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É!'))
bot.on('sticker', (ctx) => ctx.reply('üëç'))
bot.on('photo', (ctx) => ctx.reply('–§–æ—Ç–∫–∞ –∫–ª–∞—Å—Å! üëç'))
bot.on('document', (ctx) => ctx.reply('–§–∞–π–ª?! –Ø –Ω–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å –µ–µ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é'))
bot.on('audio', (ctx) => ctx.reply('–¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ!? –£ –º–µ–Ω—è –Ω–µ—Ç —É—à–µ–π!'))
bot.on('location', (ctx) => ctx.reply('–¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –≥–¥–µ —Ç—ã –∂–∏–≤–µ—à—å!'))
bot.on('video', (ctx) => ctx.reply('–ú–Ω–µ –Ω–µ–ª—å–∑—è —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–æ—Å–∏–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ!'))
bot.on('voice', (ctx) => ctx.reply('–¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ!? –£ –º–µ–Ω—è –Ω–µ—Ç —É—à–µ–π!'))


bot.launch();
// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))